# -*- coding: utf-8 -*-
"""TE_20181017.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16boi5dlacDuLB-h76f5DA3wTEKkf7Sw3

## Importer les outils

On commence par importer les bibliothèques nécessaire pour résoudre le problème avec python. Il vient:
"""

# vecteurs et algèbre linéaire
import numpy as np

# les outils pour visualiser
import matplotlib.pyplot as plt

# le solveur
import scipy.integrate as solveur

"""## Définir les constantes du problème

On commence à aborder le problème en définissant les constantes sur lesquelles se basent le problème.
"""

Vdot = 10 #L/min

CA0 = 1.5 #mol/L

CB0 = 2 # mol/L

FA0 = CA0 * Vdot

FB0 = CB0 * Vdot

FC0 = 0

FD0 = 0

FE0 = 0

FF0 = 0

"""## Définir les équations à résoudre

Les équations à résoudre sont définies dans une fonction prenant en paramètres les variables dépendantes (premier paramètre), la variable indépendante, et les différentes constantes utilisées par les équations.
"""

def equations(variables, t, FA, FB, FC, FD, FE, FF, Vdot):
  
    """Fonction représentant les équations à résoudre."""
    
    CA, CB, CC, CD, CE, CF = variables
    
    CA = FA/Vdot
    
    CB = FB/Vdot
    
    CC = FC/Vdot
    
    CD = FD/Vdot
    
    CE = FE/Vdot
    
    CF = FF/Vdot
    
    
    r1 = 0.25 * CA * CB
    
    r2 = 0.1 * CA * CD
    
    r3 = 5.0 * (CB **2)  * CC
    
    
    dFadV = -r1 -3 * r2
    dFbdV = -2 * r1 - r3
    dFcdV = r1 + r2 - 2 * r3
    dFddV = r1 - 2 * r2 + r3
    dFedV = r2
    dFddV = r3   
    
    return dFadV, dFbdV, dFcdV, dFddV, dFedV, dFddV

"""## Définir les conditions initiales

Afin de résoudre ce type d'équations différentielles ordinaires, nous devons définir les conditions initiales du problème.
"""

conditions_initiales = [CA0, CB0, FA0, FB0, FC0, FD0, FE0, FF0]

"""## Résoudre le problème à l'aide du solveur"""

t = np.linspace(0, 50, 1000) # définir les bornes d'intégration

# résolution du problème avec le solveur
resultats = solveur.odeint(
    equations, # 1er paramètre: la fonction contenant les équations à résoudre
    conditions_initiales, # 2e param: les conditions initiales
    t, # 3e param: les bornes d'intégration
    (FA, FB, FC, FD, FE, FF, Vdot) # 4e param (optionnel): les constantes utilisées par les équations
)

"""On va récupérer les vecteurs associés à chaque variable de manière à pouvoir éventuellement les afficher séparemment."""

CA = resultats[:,0]
CB = resultats[:,1]
CC = resultats[:,2]
CD = resultats[:,3]
CE = resultats[:,4]
CF = resultats[:,4]

X = (CA0 - CA)/CA0

print(CA)

"""## Visualiser les résultats

Les valeurs de v n'évoluent pas sur la même échelle que celles de u, x, y et z. On décide de les visualiser sur des graphiques différents.
"""

plt.figure(1)
plt.plot(t, CA)
plt.xlabel('t')
plt.ylabel('CA')
plt.legend(['CA'])
plt.show()